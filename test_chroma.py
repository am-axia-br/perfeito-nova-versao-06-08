#!/usr/bin/env python3
"""
Script para testar a conectividade com o ChromaDB
Execute com: docker-compose exec processo-ocr python test_chroma.py
"""

import os
import sys
import time
import requests
import chromadb
from chromadb.utils import embedding_functions

def test_raw_connection():
    """Testa a conex√£o HTTP b√°sica com o ChromaDB"""
    host = os.getenv("CHROMA_HOST", "chroma")
    port = os.getenv("CHROMA_PORT", "8000")
    url = f"http://{host}:{port}/api/v1/heartbeat"
    
    print(f"üîç Testando conex√£o HTTP com {url}")
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"‚úÖ Conex√£o HTTP bem-sucedida! Resposta: {response.text}")
            return True
        else:
            print(f"‚ùå Conex√£o HTTP falhou com c√≥digo {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Exce√ß√£o na conex√£o HTTP: {e}")
        return False

def test_chroma_client():
    """Testa o cliente ChromaDB"""
    host = os.getenv("CHROMA_HOST", "chroma")
    port = int(os.getenv("CHROMA_PORT", "8000"))
    
    print(f"üîç Testando cliente ChromaDB em {host}:{port}")
    try:
        client = chromadb.HttpClient(host=host, port=port)
        heartbeat = client.heartbeat()
        print(f"‚úÖ Cliente ChromaDB conectado! Heartbeat: {heartbeat}")
        
        # Teste de cria√ß√£o de cole√ß√£o
        try:
            ef = embedding_functions.DefaultEmbeddingFunction()
            collection = client.create_collection(name="test_collection", embedding_function=ef)
            print(f"‚úÖ Cole√ß√£o de teste criada com sucesso!")
            
            # Teste de inser√ß√£o
            collection.add(
                documents=["Este √© um teste do ChromaDB"],
                metadatas=[{"source": "teste"}],
                ids=["id1"]
            )
            print(f"‚úÖ Documento de teste inserido com sucesso!")
            
            # Teste de consulta
            results = collection.query(query_texts=["teste"], n_results=1)
            print(f"‚úÖ Consulta de teste executada com sucesso! Resultados: {results}")
            
            # Limpeza
            client.delete_collection("test_collection")
            print(f"‚úÖ Cole√ß√£o de teste removida com sucesso!")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro nas opera√ß√µes do ChromaDB: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o do cliente ChromaDB: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Iniciando testes de diagn√≥stico do ChromaDB")
    
    # Espere um pouco para garantir que o ChromaDB est√° pronto
    time.sleep(3)
    
    # Teste de conex√£o HTTP
    http_ok = test_raw_connection()
    
    # Teste do cliente ChromaDB
    client_ok = test_chroma_client()
    
    # Resumo
    print("\nüìã RESUMO DOS TESTES:")
    print(f"- Conex√£o HTTP: {'‚úÖ OK' if http_ok else '‚ùå FALHOU'}")
    print(f"- Cliente ChromaDB: {'‚úÖ OK' if client_ok else '‚ùå FALHOU'}")
    
    if http_ok and client_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM! O ChromaDB est√° funcionando corretamente.")
        sys.exit(0)
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM. Verifique as mensagens de erro acima.")
        sys.exit(1)