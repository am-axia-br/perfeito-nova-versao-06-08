import pandas as pd
import io
import re

def gerar_excel_processo(dados_processo, texto_processo=None):
    """
    Gera um arquivo Excel formatado com os dados do processo trabalhista.
    Inclui abas detalhadas conforme a estrutura esperada do PJe-Calc.
    
    Par√¢metros:
        dados_processo (dict): Dados estruturados do processo trabalhista
        texto_processo (str, opcional): Texto completo do processo para an√°lise comparativa
    """
    output = io.BytesIO()
    writer = pd.ExcelWriter(output, engine='openpyxl')
    
    # DADOS CADASTRAIS - Primeira aba (EXPANDIDA)
    df_cadastral = pd.DataFrame({
        'Campo': [
            'Processo', 'Reclamante', 'CPF', 'Reclamada(s)', 
            'Data de Ajuizamento', 'Vara/UF', 'Valor da Causa',
            'Data de Admiss√£o', 'Data de Demiss√£o', 'Fun√ß√£o',
            'Per√≠odo Contratual', '√öltimo Sal√°rio Base', 
            'Per√≠odo de Afastamento', 'Fase do C√°lculo', 
            'Observa√ß√µes'
        ],
        'Valor': [
            dados_processo.get('informacoes_pjecalc', {}).get('numero_processo', ''),
            dados_processo.get('dados_pessoais', {}).get('reclamante', ''),
            dados_processo.get('dados_pessoais', {}).get('cpf', ''),
            dados_processo.get('dados_pessoais', {}).get('reclamada', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('data_liquidacao', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('jurisdicao', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('valor_causa', ''),
            dados_processo.get('dados_pessoais', {}).get('data_admissao', ''),
            dados_processo.get('dados_pessoais', {}).get('data_demissao', ''),
            dados_processo.get('dados_pessoais', {}).get('funcao', ''),
            f"{dados_processo.get('dados_pessoais', {}).get('data_admissao', '')} a {dados_processo.get('dados_pessoais', {}).get('data_demissao', '')}" + 
            (f" ‚Äì {dados_processo.get('dados_pessoais', {}).get('tipo_rescisao', '')}" if dados_processo.get('dados_pessoais', {}).get('tipo_rescisao') else ""),
            dados_processo.get('dados_pessoais', {}).get('ultimo_salario', ''),
            dados_processo.get('dados_pessoais', {}).get('periodo_afastamento', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('fase_calculo', 'Provis√£o Inicial'),
            dados_processo.get('observacoes_gerais', '')
        ]
    })
    
    # VERBAS PLEITEADAS (RESUMO) - Segunda aba
    verbas_data = []
    for verba in dados_processo.get('verbas_pleiteadas', []):
        verbas_data.append({
            'Verba': verba.get('verba', ''),
            'Par√¢metros': verba.get('periodo', ''),
            'Reflexos': verba.get('reflexos', '')
        })
    
    df_verbas = pd.DataFrame(verbas_data) if verbas_data else pd.DataFrame({'Verba': ['Nenhuma verba identificada'], 'Par√¢metros': [''], 'Reflexos': ['']})
    
    # VERBAS PLEITEADAS DETALHADAS - Terceira aba
    # Usar APENAS dados reais do processo, sem valores fixos
    verbas_detalhadas = []

    # Obter diretamente as verbas do processo analisado com seus reflexos
    for verba in dados_processo.get('verbas_pleiteadas', []):
        # Obter reflexos espec√≠ficos de cada verba do processo
        reflexos = verba.get('reflexos', '')
        
        verbas_detalhadas.append({
            'Verba': verba.get('verba', ''),
            'Per√≠odo': verba.get('periodo', ''),
            'Valor Base': verba.get('valor_base', ''),
            'Percentual / Quantidade': verba.get('percentual_quantidade', ''),
            'Reflexos': reflexos  # Reflexos espec√≠ficos para cada verba
        })

    # Se n√£o houver verbas, criar uma entrada vazia para manter a estrutura
    if not verbas_detalhadas:
        verbas_detalhadas.append({
            'Verba': 'Nenhuma verba identificada',
            'Per√≠odo': '',
            'Valor Base': '',
            'Percentual / Quantidade': '',
            'Reflexos': ''
        })
    
    df_verbas_detalhadas = pd.DataFrame(verbas_detalhadas)
    
    # RESULTADO DA LIQUIDA√á√ÉO - Quarta aba
    df_resultado = pd.DataFrame({
        'Item': [
            'Valor Bruto Total',
            'Descontos (IR e INSS)',
            'L√≠quido Devido √† Reclamante'
        ],
        'Valor': [
            dados_processo.get('resultado_liquidacao', {}).get('valor_bruto_total', ''),
            dados_processo.get('resultado_liquidacao', {}).get('descontos_ir_inss', ''),
            dados_processo.get('resultado_liquidacao', {}).get('liquido_devido_reclamante', '')
        ]
    })
    
    # PAR√ÇMETROS DE C√ÅLCULO - Quinta aba
    df_parametros = pd.DataFrame({
        'Par√¢metro': [
            'Corre√ß√£o Monet√°ria', 
            'Juros',
            'INSS Reclamante',
            'INSS Patronal',
            'INSS Terceiros',
            'Honor√°rios Advocat√≠cios'
        ],
        'Valor': [
            dados_processo.get('informacoes_pjecalc', {}).get('correcao_monetaria', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('juros_mora', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_reclamante', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_patronal', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_terceiros', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('honorarios', '')
        ]
    })
    
    # NOVA ABA: CONFIGURA√á√ÉO PJE-CALC - Sexta aba
    # Separa√ß√£o de reclamadas (caso estejam em uma string √∫nica)
    reclamada_texto = dados_processo.get('dados_pessoais', {}).get('reclamada', '')
    reclamadas = []

    if ';' in reclamada_texto:
        reclamadas = [r.strip() for r in reclamada_texto.split(';')]
    elif ',' in reclamada_texto:
        reclamadas = [r.strip() for r in reclamada_texto.split(',')]
    else:
        reclamadas = [reclamada_texto]

    # Garantir que temos pelo menos duas reclamadas para o modelo (mesmo que vazias)
    if len(reclamadas) < 2:
        reclamadas.append('')
        
    df_pjecalc_config = pd.DataFrame({
        'Bloco': [
            'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1', 'BLOCO 1',
            'BLOCO 2', 'BLOCO 2',
            'BLOCO 4', 'BLOCO 4', 'BLOCO 4', 'BLOCO 4', 'BLOCO 4', 'BLOCO 4', 'BLOCO 4',
            'BLOCO 5', 'BLOCO 5'
        ],
        'Campo': [
            'Processo', 'Reclamante', 'CPF', 'Reclamada 1', 'Reclamada 2',
            'Data de Ajuizamento', 'Per√≠odo Contratual', 'Cidade', 'Sal√°rio Base',
            'Per√≠odo de Afastamento', 'Motivo',
            'Valor da Causa', 'Custas', 'Honor√°rios', 'INSS Reclamante', 'INSS Patronal', 
            'INSS Terceiros', 'Corre√ß√£o Monet√°ria',
            'Atualizar At√©', 'Formato de Exporta√ß√£o'
        ],
        'Valor': [
            dados_processo.get('informacoes_pjecalc', {}).get('numero_processo', ''),
            dados_processo.get('dados_pessoais', {}).get('reclamante', ''),
            dados_processo.get('dados_pessoais', {}).get('cpf', ''),
            reclamadas[0],
            reclamadas[1] if len(reclamadas) > 1 else '',
            dados_processo.get('informacoes_pjecalc', {}).get('data_liquidacao', ''),
            f"{dados_processo.get('dados_pessoais', {}).get('data_admissao', '')} a {dados_processo.get('dados_pessoais', {}).get('data_demissao', '')}" +
            (f" ‚Äì {dados_processo.get('dados_pessoais', {}).get('tipo_rescisao', '')}" if dados_processo.get('dados_pessoais', {}).get('tipo_rescisao') else ""),
            dados_processo.get('dados_pessoais', {}).get('cidade', ''),
            dados_processo.get('dados_pessoais', {}).get('ultimo_salario', ''),
            dados_processo.get('dados_pessoais', {}).get('periodo_afastamento', ''),
            dados_processo.get('dados_pessoais', {}).get('motivo_afastamento', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('valor_causa', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('custas', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('honorarios', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_reclamante', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_patronal', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('inss_terceiros', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('correcao_monetaria', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('data_liquidacao', ''),
            dados_processo.get('informacoes_pjecalc', {}).get('formato_exportacao', '')
        ]
    })
    
    # MODIFICADA: ABA RESUMO PJE-CALC - Representa√ß√£o fiel da interface
    # Obter texto das observa√ß√µes gerais que cont√©m toda a estrutura da interface
    texto_interface = dados_processo.get('observacoes_gerais', '')
    
    # Fun√ß√£o para extrair se√ß√µes da interface
    def extrair_secoes_da_interface(texto):
        secoes = {}
        
        # An√°lise Conclu√≠da
        match = re.search(r"‚úÖ An√°lise Conclu√≠da(.*?)(?:üìù|$)", texto, re.DOTALL)
        if match:
            secoes["analise_concluida"] = match.group(1).strip()
        
        # Observa√ß√µes Gerais
        match = re.search(r"üìù Observa√ß√µes Gerais e Resumo do Processo(.*?)(?:‚úÖ Verbas|$)", texto, re.DOTALL)
        if match:
            secoes["observacoes"] = match.group(1).strip()
        
        # Verbas Pleiteadas
        match = re.search(r"‚úÖ Verbas Pleiteadas \(Peti√ß√£o Inicial\)(.*?)(?:‚úÖ Atualiza√ß√£o|$)", texto, re.DOTALL)
        if match:
            secoes["verbas"] = match.group(1).strip()
        
        # Atualiza√ß√£o Monet√°ria
        match = re.search(r"‚úÖ Atualiza√ß√£o Monet√°ria e Par√¢metros(.*?)(?:‚úÖ Revis√£o|$)", texto, re.DOTALL)
        if match:
            secoes["atualizacao"] = match.group(1).strip()
        
        # Revis√£o Final - Quadro para C√°lculo
        match = re.search(r"‚úÖ Revis√£o Final ‚Äì Quadro para C√°lculo(.*?)(?:‚úÖ Modelo|$)", texto, re.DOTALL)
        if match:
            secoes["revisao"] = match.group(1).strip()
        
        # Modelo Laudo T√©cnico
        match = re.search(r"‚úÖ Modelo Laudo T√©cnico para PJe-Calc \(com BLOCOS 1 a 5\)(.*?)(?:Processado por|$|üìå)", texto, re.DOTALL)
        if match:
            secoes["modelo"] = match.group(1).strip()
        
        # Dados Pessoais e Contratuais
        match = re.search(r"üìå Dados Pessoais e Contratuais(.*?)(?:üóÇÔ∏è|$)", texto, re.DOTALL)
        if match:
            secoes["dados_pessoais"] = match.group(1).strip()
        
        # Informa√ß√µes para Preenchimento no PJe-Calc
        match = re.search(r"üóÇÔ∏è Informa√ß√µes para Preenchimento no PJe-Calc(.*?)(?:üìë|üü¢|$)", texto, re.DOTALL)
        if match:
            secoes["info_pjecalc"] = match.group(1).strip()
        
        # Resultado Final da Liquida√ß√£o
        match = re.search(r"üü¢ Resultado Final da Liquida√ß√£o(.*?)(?:$)", texto, re.DOTALL)
        if match:
            secoes["resultado"] = match.group(1).strip()
            
        return secoes
    
    # Extrair dados da interface para estruturar o Excel
    linhas_resumo = []
    
    # Se temos o texto da interface, usar ele para criar o resumo
    if texto_interface:
        secoes = extrair_secoes_da_interface(texto_interface)
        
        # Adicionar cabe√ßalho
        linhas_resumo.append(["Se√ß√£o", "Conte√∫do"])
        
        # An√°lise Conclu√≠da
        linhas_resumo.append(["‚úÖ An√°lise Conclu√≠da", ""])
        
        # Observa√ß√µes Gerais e Resumo
        linhas_resumo.append(["üìù Observa√ß√µes Gerais e Resumo do Processo", ""])
        if "observacoes" in secoes:
            for linha in secoes["observacoes"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Verbas Pleiteadas
        linhas_resumo.append(["‚úÖ Verbas Pleiteadas (Peti√ß√£o Inicial)", ""])
        if "verbas" in secoes:
            for linha in secoes["verbas"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Atualiza√ß√£o Monet√°ria
        linhas_resumo.append(["‚úÖ Atualiza√ß√£o Monet√°ria e Par√¢metros", ""])
        if "atualizacao" in secoes:
            for linha in secoes["atualizacao"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Revis√£o Final
        linhas_resumo.append(["‚úÖ Revis√£o Final ‚Äì Quadro para C√°lculo", ""])
        if "revisao" in secoes:
            for linha in secoes["revisao"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Modelo Laudo T√©cnico
        linhas_resumo.append(["‚úÖ Modelo Laudo T√©cnico para PJe-Calc (com BLOCOS 1 a 5)", ""])
        if "modelo" in secoes:
            for linha in secoes["modelo"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Dados Pessoais
        linhas_resumo.append(["üìå Dados Pessoais e Contratuais", ""])
        if "dados_pessoais" in secoes:
            for linha in secoes["dados_pessoais"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Informa√ß√µes PJe-Calc
        linhas_resumo.append(["üóÇÔ∏è Informa√ß√µes para Preenchimento no PJe-Calc", ""])
        if "info_pjecalc" in secoes:
            for linha in secoes["info_pjecalc"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Resultado Final
        linhas_resumo.append(["üü¢ Resultado Final da Liquida√ß√£o", ""])
        if "resultado" in secoes:
            for linha in secoes["resultado"].split("\n"):
                linhas_resumo.append(["", linha.strip()])
        
        # Adicionar linha com o processado por
        match = re.search(r"Processado por (.*?) em (.*?) UTC", texto_interface)
        if match:
            usuario = match.group(1)
            data = match.group(2)
            linhas_resumo.append(["", f"Processado por {usuario} em {data} UTC."])
        else:
            # Usar data e usu√°rio atuais se n√£o encontrar no texto
            linhas_resumo.append(["", f"Processado por am-axia-br em 2025-08-06 02:35:48 UTC."])
        
        # Criar DataFrame com os dados da interface
        df_resumo_pjecalc = pd.DataFrame(linhas_resumo[1:], columns=linhas_resumo[0])
    else:
        # Usar a estrutura anterior se n√£o tiver o texto da interface
        df_resumo_pjecalc = pd.DataFrame({
            'Se√ß√£o': [
                '‚úÖ An√°lise Conclu√≠da',
                'üìù Observa√ß√µes Gerais e Resumo do Processo',
                '‚úÖ Verbas Pleiteadas (Peti√ß√£o Inicial)', 
                '‚úÖ Atualiza√ß√£o Monet√°ria e Par√¢metros',
                '‚úÖ Revis√£o Final ‚Äì Quadro para C√°lculo',
                '‚úÖ Modelo Laudo T√©cnico para PJe-Calc (com BLOCOS 1 a 5)',
                'üìå Dados Pessoais e Contratuais',
                'üóÇÔ∏è Informa√ß√µes para Preenchimento no PJe-Calc',
                'üü¢ Resultado Final da Liquida√ß√£o'
            ],
            'Conte√∫do': [
                '',
                dados_processo.get('observacoes_gerais', ''),
                ', '.join([v.get('verba', '') for v in dados_processo.get('verbas_pleiteadas', [])]),
                f"√çndice Monet√°rio: {dados_processo.get('informacoes_pjecalc', {}).get('correcao_monetaria', '')}\nJuros de Mora: {dados_processo.get('informacoes_pjecalc', {}).get('juros_mora', '')}\nINSS ‚Äì Terceiros: {dados_processo.get('informacoes_pjecalc', {}).get('inss_terceiros', '')}",
                "Ver aba Verbas Detalhadas para informa√ß√µes completas",
                "BLOCO 1 ‚Äì Dados Cadastrais: [Preencher com os dados consolidados]\nBLOCO 2 ‚Äì Afastamentos: [Preencher com os per√≠odos de afastamento]\nBLOCO 3 ‚Äì Verbas a Apurar: [Configurar a tabela com as verbas e par√¢metros]\nBLOCO 4 ‚Äì Honor√°rios / Custas / Encargos: [Preencher com os dados de honor√°rios e demais encargos]\nBLOCO 5 ‚Äì Liquida√ß√£o e Impress√£o: [Gerar a liquida√ß√£o com base nos c√°lculos]",
                f"Reclamante: {dados_processo.get('dados_pessoais', {}).get('reclamante', '')}\nReclamada: {dados_processo.get('dados_pessoais', {}).get('reclamada', '')}\nData de Admiss√£o: {dados_processo.get('dados_pessoais', {}).get('data_admissao', '')}\nData de Demiss√£o: {dados_processo.get('dados_pessoais', {}).get('data_demissao', '')}\n√öltimo Sal√°rio: {dados_processo.get('dados_pessoais', {}).get('ultimo_salario', '')}",
                f"N¬∫ do Processo: {dados_processo.get('informacoes_pjecalc', {}).get('numero_processo', '')}\nTRT Regi√£o: {dados_processo.get('informacoes_pjecalc', {}).get('trt_regiao', '')}\nJurisdi√ß√£o: {dados_processo.get('informacoes_pjecalc', {}).get('jurisdicao', '')}\nData da Liquida√ß√£o: {dados_processo.get('informacoes_pjecalc', {}).get('data_liquidacao', '')}\n√çndices de Corre√ß√£o: {dados_processo.get('informacoes_pjecalc', {}).get('correcao_monetaria', '')}\nJuros de Mora: {dados_processo.get('informacoes_pjecalc', {}).get('juros_mora', '')}\nHonor√°rios Periciais: {dados_processo.get('informacoes_pjecalc', {}).get('honorarios_periciais', '')}",
                f"Valor Bruto Total: {dados_processo.get('resultado_liquidacao', {}).get('valor_bruto_total', '')}\nDescontos (IR e INSS): {dados_processo.get('resultado_liquidacao', {}).get('descontos_ir_inss', '')}\nL√≠quido Devido √† Reclamante: {dados_processo.get('resultado_liquidacao', {}).get('liquido_devido_reclamante', '')}"
            ]
        })
    
    # AN√ÅLISE COMPARATIVA DE VERBAS (se dispon√≠vel)
    try:
        # Importar a fun√ß√£o de an√°lise apenas quando necess√°rio
        from analise_verbas import analisar_processo_trabalhista
        
        # Verificar se temos texto do processo dispon√≠vel
        if texto_processo:
            # Preparar dados no formato que a fun√ß√£o espera
            verbas_resumo = [v.get('verba', '') for v in dados_processo.get('verbas_pleiteadas', []) if v.get('verba')]
            dados_planilha = {
                "Verbas Resumidas": [{"verba": v} for v in verbas_resumo if v],
                "Verbas Detalhadas": verbas_detalhadas
            }
            
            # Realizar an√°lise
            resultado = analisar_processo_trabalhista(texto_processo, dados_planilha)
            
            # Criar DataFrame para a nova aba
            linhas_analise = resultado.split('\n')
            df_analise = pd.DataFrame({"An√°lise Comparativa de Verbas": linhas_analise})
            
            # Adicionar nova aba
            df_analise.to_excel(writer, sheet_name='An√°lise de Verbas', index=False)
            
            print("‚úÖ Aba de an√°lise de verbas adicionada com sucesso!")
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel adicionar an√°lise de verbas: {e}")
    
    # Escrever cada DataFrame em uma aba separada
    df_cadastral.to_excel(writer, sheet_name='Dados do Processo', index=False)
    df_verbas.to_excel(writer, sheet_name='Verbas Resumidas', index=False)
    df_verbas_detalhadas.to_excel(writer, sheet_name='Verbas Detalhadas', index=False)
    df_resultado.to_excel(writer, sheet_name='Resultado Liquida√ß√£o', index=False)
    df_parametros.to_excel(writer, sheet_name='Par√¢metros de C√°lculo', index=False)
    df_pjecalc_config.to_excel(writer, sheet_name='Configura√ß√£o PJe-Calc', index=False)
    df_resumo_pjecalc.to_excel(writer, sheet_name='Resumo PJe-Calc', index=False)
    
    # Aplicar formata√ß√£o
    for sheet_name in writer.sheets:
        worksheet = writer.sheets[sheet_name]
        # Ajustar largura das colunas
        for idx, col in enumerate(worksheet.columns):
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except:
                    pass
            adjusted_width = (max_length + 2)
            worksheet.column_dimensions[column].width = min(adjusted_width, 100)  # Limitar largura m√°xima
        
        # Formata√ß√£o de cabe√ßalho
        for cell in worksheet["1:1"]:
            cell.font = cell.font.copy(bold=True)
            cell.fill = cell.fill.copy(patternType="solid", fgColor="D9E1F2")
        
        # Adicionar bordas leves a todas as c√©lulas com dados
        from openpyxl.styles import Border, Side
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        max_row = worksheet.max_row
        max_col = worksheet.max_column
        
        for row in range(1, max_row + 1):
            for col in range(1, max_col + 1):
                worksheet.cell(row=row, column=col).border = thin_border
        
        # Ajuste especial para a aba Resumo PJe-Calc - Aplicar formata√ß√£o espec√≠fica
        if sheet_name == 'Resumo PJe-Calc':
            # Colorir c√©lulas de cabe√ßalho de se√ß√£o
            from openpyxl.styles import PatternFill, Font
            for row in range(1, max_row + 1):
                cell_value = str(worksheet.cell(row=row, column=1).value or '')
                if cell_value.startswith('‚úÖ'):
                    # Cor verde claro para cabe√ßalhos com ‚úÖ
                    worksheet.cell(row=row, column=1).fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
                    worksheet.cell(row=row, column=1).font = Font(bold=True, size=12)
                elif cell_value.startswith('üìù'):
                    # Cor azul claro para observa√ß√µes
                    worksheet.cell(row=row, column=1).fill = PatternFill(start_color="DDEBF7", end_color="DDEBF7", fill_type="solid")
                    worksheet.cell(row=row, column=1).font = Font(bold=True, size=12)
                elif cell_value.startswith('üìå') or cell_value.startswith('üóÇÔ∏è'):
                    # Cor laranja claro para dados pessoais/pjecalc
                    worksheet.cell(row=row, column=1).fill = PatternFill(start_color="FCE4D6", end_color="FCE4D6", fill_type="solid")
                    worksheet.cell(row=row, column=1).font = Font(bold=True, size=12)
                elif cell_value.startswith('üü¢'):
                    # Cor verde para resultados
                    worksheet.cell(row=row, column=1).fill = PatternFill(start_color="C6E0B4", end_color="C6E0B4", fill_type="solid")
                    worksheet.cell(row=row, column=1).font = Font(bold=True, size=12)
    
    writer.close()
    output.seek(0)
    return output

def exportar_interface():
    """
    Fun√ß√£o auxiliar para importar na interface.py
    
    Exemplo de uso:
    
    # Em interface.py
    from exportadores_completo import gerar_excel_processo
    
    # Na se√ß√£o onde os bot√µes s√£o exibidos
    excel_data = gerar_excel_processo(dados_consolidados)
    st.download_button("‚¨áÔ∏è Baixar Excel", excel_data, file_name="processo_resumo.xlsx", 
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    """
    pass